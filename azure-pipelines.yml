trigger:
- '*'

variables:
- group: Release

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: "Build"
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - task: DockerCompose@0
        displayName: 'Create compose graylog'
        inputs:
          action: Push services
          azureSubscription: 'test-connection'
          azureContainerRegistry: '{"loginServer":"acrmmhddofogbaic.azurecr.io", "id" : "/subscriptions/b986656e-c238-4d08-bc76-efbfc9a46470/resourceGroups/test/providers/Microsoft.ContainerRegistry/registries/acrmmhddofogbaic"}'
          dockerComposeFile: '$(Build.SourcesDirectory)/graylog/docker-compose.yml'
          projectName: 'graylog'
          qualifyImageNames: true
          additionalImageTags: $(tag)
  # - job: 'Create'
  #   pool:
  #     vmImage: 'ubuntu-18.04'
  #   steps:
  #     - task: AzureResourceManagerTemplateDeployment@3
  #       displayName: 'Create resources'
  #       inputs:
  #         deploymentScope: 'Resource Group'
  #         azureResourceManagerConnection: 'test-connection'
  #         subscriptionId: '$(subscriptionId)'
  #         action: 'Create Or Update Resource Group'
  #         resourceGroupName: 'test'
  #         location: 'East US'
  #         templateLocation: 'Linked artifact'
  #         csmFile: 'create.json'
  #         overrideParameters: '-clientId "$(clientId)" -clientSecret "$(clientSecret)"'
  #         deploymentMode: 'Incremental'

  # - job: 'Build'
  #   displayName: 'Build job'
  #   pool:
  #     vmImage: 'ubuntu-18.04'
  #   steps:
  #   - task: Docker@2
  #     displayName: 'Build and push web image to container registry'
  #     inputs:
  #       command: buildAndPush
  #       buildContext: $(Build.Repository.LocalPath)
  #       repository: $(webRepository)
  #       dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
  #       containerRegistry: 'acr-connection'
  #       tags: |
  #         $(tag)

  #   - task: Docker@2
  #     displayName: 'Build and push leaderboard image to container registry'
  #     inputs:
  #       command: buildAndPush
  #       buildContext: $(Build.Repository.LocalPath)
  #       repository: $(leaderboardRepository)
  #       dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.LeaderboardContainer/Dockerfile'
  #       containerRegistry: 'acr-connection'
  #       tags: |
  #         $(tag)

  #   - publish: '$(Build.SourcesDirectory)/manifests'
  #     artifact: manifests

# - stage: 'Deploy'
#   displayName: 'Deploy the container'
#   dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: 'Deploy job'
#     pool:
#       vmImage: 'ubuntu-18.04'
#     environment: 'spike.default'
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: manifests
#           - task: KubernetesManifest@0
#             displayName: create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: 'mossad-acr-connection'
#               kubernetesServiceConnection: 'mossad-kube-connection'
#               namespace: 'default'
              
#           - task: KubernetesManifest@0
#             displayName: Deploy to k8s cluster
#             inputs:
#               action: deploy
#               kubernetesServiceConnection: 'mossad-kube-connection'
#               namespace: 'default'
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(RegistryName)/$(webRepository):$(tag)
#                 $(RegistryName)/$(leaderboardRepository):$(tag)




    # steps:
    # - task: AzureWebAppContainer@1
    #   inputs:
    #    appName: $(WebAppName)
    #    azureSubscription: 'Resource Manager - Tailspin - Space Game'
    #    imageName: $(RegistryName)/$(webRepository):$(build.buildId)
