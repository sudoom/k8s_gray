trigger:
- '*'

variables:
- group: Release

stages:
- stage: 'Build'
  displayName: 'Build and Push'
  jobs:  

  # - job: 'Create'
  #   pool:
  #     vmImage: 'ubuntu-18.04'
  #   steps:
  #     - task: AzureResourceManagerTemplateDeployment@3
  #       displayName: 'Create resources'
  #       inputs:
  #         deploymentScope: 'Resource Group'
  #         azureResourceManagerConnection: 'test-connection'
  #         subscriptionId: '$(subscriptionId)'
  #         action: 'Create Or Update Resource Group'
  #         resourceGroupName: 'test'
  #         location: 'East US'
  #         templateLocation: 'Linked artifact'
  #         csmFile: 'create.json'
  #         overrideParameters: '-clientId "$(clientId)" -clientSecret "$(clientSecret)"'
  #         deploymentMode: 'Incremental'

  # - job: 'Create_namespaces'
  #   pool:
  #     vmImage: 'ubuntu-18.04'
  #   steps:
  #   - task: Kubernetes@1
  #     displayName: 'kubectl create'            
  #     inputs:            
  #       kubernetesServiceEndpoint: 'mossad-kube-connection'            
  #       command: create            
  #       arguments: 'namespace graylog-stage' 

  #   - task: Kubernetes@1
  #     displayName: 'kubectl create'            
  #     inputs:            
  #       kubernetesServiceEndpoint: 'mossad-kube-connection'            
  #       command: create            
  #       arguments: 'namespace webapp-stage'  

  #   - task: Kubernetes@1
  #     displayName: 'kubectl create'            
  #     inputs:            
  #       kubernetesServiceEndpoint: 'mossad-kube-connection'            
  #       command: create            
  #       arguments: 'namespace graylog-dev'     

  #   - task: Kubernetes@1
  #     displayName: 'kubectl create'            
  #     inputs:            
  #       kubernetesServiceEndpoint: 'mossad-kube-connection'            
  #       command: create            
  #       arguments: 'namespace webapp-dev' 

  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: Docker@2
      displayName: 'Build and push web image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        containerRegistry: 'acr-connection'
        tags: |
          $(tag)

    - task: Docker@2
      displayName: 'Build and push leaderboard image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(leaderboardRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.LeaderboardContainer/Dockerfile'
        containerRegistry: 'acr-connection'
        tags: |
          $(tag)

    - publish: '$(Build.SourcesDirectory)/manifests'
      artifact: manifests





  # - job: "Build"
  #   pool:
  #     vmImage: 'ubuntu-18.04'
  #   steps:
  #     - publish: '$(Build.SourcesDirectory)/manifests'
  #       artifact: manifests

  #     - download: current
  #       artifact: manifests
      
  #     - task: KubernetesManifest@0
  #       displayName: Deploy to k8s cluster
  #       inputs:
  #         action: deploy
  #         kubernetesServiceConnection: 'mossad-kube-connection'
  #         namespace: 'graylog-dev'
  #         manifests: |
  #           $(Pipeline.Workspace)/manifests/elastic-deploy.yml
  #           $(Pipeline.Workspace)/manifests/mongo-deploy.yml
  #           $(Pipeline.Workspace)/manifests/graylog-deploy.yml
  #           $(Pipeline.Workspace)/manifests/cronjob.yml
  #           # $(System.DefaultWorkingDirectory)/sudoom.k8s_gray/manifests/*.yml

          # imagePullSecrets: |
          #   $(imagePullSecret)
          # containers: |
          #   $(RegistryName)/$(webRepository):$(tag)
          #   $(RegistryName)/$(leaderboardRepository):$(tag)


























# - stage: 'Deploy'
#   displayName: 'Deploy the container'
#   dependsOn: Build
#   jobs:
#   - deployment: Deploy
#     displayName: 'Deploy job'
#     pool:
#       vmImage: 'ubuntu-18.04'
#     environment: 'spike.default'
#     variables:
#     - group: Release
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: manifests
#           - task: KubernetesManifest@0
#             displayName: create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: 'mossad-acr-connection'
#               kubernetesServiceConnection: 'mossad-kube-connection'
#               namespace: 'default'
              
#           - task: KubernetesManifest@0
#             displayName: Deploy to k8s cluster
#             inputs:
#               action: deploy
#               kubernetesServiceConnection: 'mossad-kube-connection'
#               namespace: 'default'
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(RegistryName)/$(webRepository):$(tag)
#                 $(RegistryName)/$(leaderboardRepository):$(tag)

